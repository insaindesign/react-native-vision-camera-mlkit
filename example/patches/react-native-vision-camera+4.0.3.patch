diff --git a/node_modules/react-native-vision-camera/src/frame-processors/runAsync.ts b/node_modules/react-native-vision-camera/src/frame-processors/runAsync.ts
index c27ed78..7da6801 100644
--- a/node_modules/react-native-vision-camera/src/frame-processors/runAsync.ts
+++ b/node_modules/react-native-vision-camera/src/frame-processors/runAsync.ts
@@ -16,7 +16,7 @@ try {
   const Worklets = WorkletsProxy.Worklets
   isAsyncContextBusy = Worklets.createSharedValue(false)

-  const asyncContext = Worklets.createContext('VisionCamera.async')
+  const asyncContext = Worklets.defaultContext
   runOnAsyncContext = asyncContext.createRunAsync((frame: Frame, func: () => void) => {
     'worklet'
     try {
diff --git a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/CameraSession.kt b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/CameraSession.kt
index 16d9aa5..3b7c878 100644
--- a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/CameraSession.kt
+++ b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/CameraSession.kt
@@ -345,6 +345,7 @@ class CameraSession(private val context: Context, private val callback: Callback
       val pixelFormat = frameProcessorConfig.config.pixelFormat
       Log.i(TAG, "Creating $pixelFormat Frame Processor output...")
       val analyzer = ImageAnalysis.Builder().also { analysis ->
+        analysis.setOutputImageRotationEnabled(true)
         analysis.setBackpressureStrategy(ImageAnalysis.STRATEGY_BLOCK_PRODUCER)
         analysis.setOutputImageFormat(pixelFormat.toImageAnalysisFormat())
         if (format != null) {
